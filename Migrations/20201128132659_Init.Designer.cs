// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test.Models;

namespace test.Migrations
{
    [DbContext(typeof(AppDataDbContext))]
    [Migration("20201128132659_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("test.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdS")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IdS");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("test.Models.Bank", b =>
                {
                    b.Property<string>("IdBank")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameBank")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("IdBank");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("test.Models.BookType", b =>
                {
                    b.Property<string>("IdBookType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameBookType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBookType");

                    b.ToTable("BookTypes");
                });

            modelBuilder.Entity("test.Models.Customer", b =>
                {
                    b.Property<string>("IdCust")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressCust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOBCust")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDCardCust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IDCardGrantedDayCust")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameCust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCust")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCust");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("test.Models.DepositPaper", b =>
                {
                    b.Property<string>("IdDP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DepositsDP")
                        .HasColumnType("float");

                    b.Property<string>("IdBank")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdBookType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCust")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdS")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSB")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransactionTimeDP")
                        .HasColumnType("datetime2");

                    b.HasKey("IdDP");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdBookType");

                    b.HasIndex("IdCust");

                    b.HasIndex("IdS");

                    b.HasIndex("IdSB");

                    b.ToTable("DepositPapers");
                });

            modelBuilder.Entity("test.Models.DetailInterest", b =>
                {
                    b.Property<string>("IdDI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdInterest")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdTerm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InterestRateDI")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDI");

                    b.HasIndex("IdInterest");

                    b.HasIndex("IdTerm");

                    b.ToTable("DetailInterests");
                });

            modelBuilder.Entity("test.Models.DetailReport", b =>
                {
                    b.Property<string>("IdDR")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClosedBooks")
                        .HasColumnType("int");

                    b.Property<string>("IdBookType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdReport")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OpenedBooks")
                        .HasColumnType("int");

                    b.Property<int>("TotalBooks")
                        .HasColumnType("int");

                    b.Property<double>("TotalExpense")
                        .HasColumnType("float");

                    b.Property<double>("TotalRevenue")
                        .HasColumnType("float");

                    b.HasKey("IdDR");

                    b.HasIndex("IdBookType");

                    b.HasIndex("IdReport");

                    b.ToTable("DetailReports");
                });

            modelBuilder.Entity("test.Models.Interest", b =>
                {
                    b.Property<string>("IdInterest")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppliedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppliedTo")
                        .HasColumnType("datetime2");

                    b.HasKey("IdInterest");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("test.Models.Report", b =>
                {
                    b.Property<string>("IdReport")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("IdReport");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("test.Models.SavingBook", b =>
                {
                    b.Property<string>("IdSB")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("float");

                    b.Property<double>("DepositsSB")
                        .HasColumnType("float");

                    b.Property<DateTime>("DueDaySB")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdBookType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCust")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdS")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdTerm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InterestPaymentMethodSB")
                        .HasColumnType("bit");

                    b.Property<string>("InterestReceivingAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenDaySB")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSB");

                    b.HasIndex("IdBookType");

                    b.HasIndex("IdCust");

                    b.HasIndex("IdS");

                    b.HasIndex("IdTerm");

                    b.ToTable("SavingBooks");
                });

            modelBuilder.Entity("test.Models.Staff", b =>
                {
                    b.Property<string>("IdS")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DOBS")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndWorking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IDCardGrantedDayS")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDCardS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdBank")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartWorking")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WorkingStatus")
                        .HasColumnType("bit");

                    b.HasKey("IdS");

                    b.HasIndex("IdBank");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("test.Models.Term", b =>
                {
                    b.Property<string>("IdTerm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTerm");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("test.Models.WithdrawalPaper", b =>
                {
                    b.Property<string>("IdWP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookTypeIdBookType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdBank")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCust")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdS")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSB")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransactionTimeWP")
                        .HasColumnType("datetime2");

                    b.Property<double>("WithdrawalsWP")
                        .HasColumnType("float");

                    b.HasKey("IdWP");

                    b.HasIndex("BookTypeIdBookType");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdCust");

                    b.HasIndex("IdS");

                    b.HasIndex("IdSB");

                    b.ToTable("WithdrawalPapers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("test.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("test.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("test.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test.Models.AppUser", b =>
                {
                    b.HasOne("test.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("IdS");
                });

            modelBuilder.Entity("test.Models.DepositPaper", b =>
                {
                    b.HasOne("test.Models.Bank", "Bank")
                        .WithMany("DepositPapers")
                        .HasForeignKey("IdBank");

                    b.HasOne("test.Models.BookType", "BookType")
                        .WithMany()
                        .HasForeignKey("IdBookType");

                    b.HasOne("test.Models.Customer", "Customer")
                        .WithMany("DepositPapers")
                        .HasForeignKey("IdCust");

                    b.HasOne("test.Models.Staff", "Staff")
                        .WithMany("DepositPapers")
                        .HasForeignKey("IdS");

                    b.HasOne("test.Models.SavingBook", "SavingBook")
                        .WithMany("DepositPapers")
                        .HasForeignKey("IdSB");
                });

            modelBuilder.Entity("test.Models.DetailInterest", b =>
                {
                    b.HasOne("test.Models.Interest", "Interest")
                        .WithMany("DetailInterests")
                        .HasForeignKey("IdInterest");

                    b.HasOne("test.Models.Term", "Term")
                        .WithMany("DetailInterests")
                        .HasForeignKey("IdTerm");
                });

            modelBuilder.Entity("test.Models.DetailReport", b =>
                {
                    b.HasOne("test.Models.BookType", "BookType")
                        .WithMany("DetailReports")
                        .HasForeignKey("IdBookType");

                    b.HasOne("test.Models.Report", "Report")
                        .WithMany("DetailReports")
                        .HasForeignKey("IdReport");
                });

            modelBuilder.Entity("test.Models.SavingBook", b =>
                {
                    b.HasOne("test.Models.BookType", "BookType")
                        .WithMany("SavingBooks")
                        .HasForeignKey("IdBookType");

                    b.HasOne("test.Models.Customer", "Customer")
                        .WithMany("SavingBooks")
                        .HasForeignKey("IdCust");

                    b.HasOne("test.Models.Staff", "Staff")
                        .WithMany("SavingBooks")
                        .HasForeignKey("IdS");

                    b.HasOne("test.Models.Term", "Term")
                        .WithMany("SavingBooks")
                        .HasForeignKey("IdTerm");
                });

            modelBuilder.Entity("test.Models.Staff", b =>
                {
                    b.HasOne("test.Models.Bank", "Bank")
                        .WithMany("Staffs")
                        .HasForeignKey("IdBank");
                });

            modelBuilder.Entity("test.Models.WithdrawalPaper", b =>
                {
                    b.HasOne("test.Models.BookType", null)
                        .WithMany("WithdrawalPapers")
                        .HasForeignKey("BookTypeIdBookType");

                    b.HasOne("test.Models.Bank", "Bank")
                        .WithMany("WithdrawalPapers")
                        .HasForeignKey("IdBank");

                    b.HasOne("test.Models.Customer", "Customer")
                        .WithMany("WithdrawalPapers")
                        .HasForeignKey("IdCust");

                    b.HasOne("test.Models.Staff", "Staff")
                        .WithMany("WithdrawalPapers")
                        .HasForeignKey("IdS");

                    b.HasOne("test.Models.SavingBook", "SavingBook")
                        .WithMany("WithdrawalPapers")
                        .HasForeignKey("IdSB");
                });
#pragma warning restore 612, 618
        }
    }
}
